// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Article {
  id               Int        @id() @default(autoincrement())
  type             String     @db.Char(40)
  price            Int
  discription      String     @db.VarChar(3000)
  name             String     @unique() @db.Char(255)
  count            Int        @default(1)
  ageGroup         String     @map("age_group") @db.Char(100)
  views            Int        @default(0)
  gender           String     @db.Char(40)
  isPreviouslyUsed Boolean    @default(false) @map("is_previously_used")
  createdAt        DateTime   @default(now()) @map("created_at")
  updatedAt        DateTime   @default(now()) @updatedAt @map("updated_at")
  images           File[]
  sale             Sale?
  reviews          Review[]
  categories       Category[] @relation(name: "_article_category")

  @@map("article")
}

model File {
  id        Int      @id() @default(autoincrement())
  name      String   @db.Char(255)
  url       String   @db.Char(255)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  articleId Int?     @map("article_id")
  article   Article? @relation(fields: [articleId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("file")
}

model Sale {
  id         Int      @id() @default(autoincrement())
  reason     String   @db.VarChar(1000)
  oldPrise   Int      @map("old_prise")
  newPrise   Int      @map("new_prise")
  activeTill DateTime @map("active_till")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at")
  articleId  Int?     @unique @map("article_id")
  article    Article? @relation(fields: [articleId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("sale")
}

model Review {
  id        Int      @id() @default(autoincrement())
  text      String   @db.VarChar(3000)
  stars     Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  articleId Int?     @map("article_id")
  article   Article? @relation(fields: [articleId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("review")
}

model Category {
  id       Int       @id() @default(autoincrement())
  name     String    @db.Char(255)
  articles Article[] @relation(name: "_article_category")

  @@map("category")
}

enum Role {
  USER
  ADMIN
}

model User {
  id        Int     @id() @default(autoincrement())
  firstName String  @map("first_name") @db.Char(255)
  lastName  String  @map("last_name") @db.Char(255)
  password  String? @db.Char(255)
  email     String  @unique() @db.Char(255)
  role      Role    @default(USER)
}
