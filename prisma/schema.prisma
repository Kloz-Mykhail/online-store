generator client {
  provider = "prisma-client-js"
}

// generator dbml {
//   provider = "prisma-dbml-generator"
// }

generator prismaClassGenerator {
  provider = "prisma-class-generator"
  output   = "./generated"
  dryRun   = false
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Article {
  id               Int            @id @default(autoincrement())
  price            Float          @db.Float
  inStock          Boolean?       @map("in_stock")
  discription      String         @db.VarChar(3000)
  characteristic   String         @db.VarChar(3000)
  rating           Float?         @db.Float
  name             String         @unique @db.Char(255)
  count            Int            @default(1)
  views            Int            @default(0)
  isPreviouslyUsed Boolean        @default(false) @map("is_previously_used")
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime       @default(now()) @updatedAt @map("updated_at")
  images           ArticlePhoto[]
  sale             Sale?
  reviews          Review[]
  categories       Category[]     @relation(name: "_article_category")
  cartItems        CartItem[]
  folovers         User[]         @relation(name: "_user_favorites")
  orderItems       OrderItem[]

  @@map("article")
}

model ArticlePhoto {
  id        Int      @id @default(autoincrement())
  name      String   @db.Char(255)
  url       String   @db.Char(255)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  articleId Int      @map("article_id")
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("article_photo")
}

model Sale {
  id         Int      @id @default(autoincrement())
  newPrise   Int      @map("new_prise")
  activeTill DateTime @map("active_till")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at")
  articleId  Int?     @unique @map("article_id")
  article    Article? @relation(fields: [articleId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("sale")
}

model Review {
  id        Int      @id @default(autoincrement())
  text      String   @db.VarChar(3000)
  stars     Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  articleId Int?     @map("article_id")
  article   Article? @relation(fields: [articleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId  Int?     @map("author_id")
  author    User?    @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("review")
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique @db.Char(255)
  articles Article[] @relation(name: "_article_category")

  @@map("category")
}

enum Role {
  USER
  ADMIN
}

enum Provider {
  EMAIL
  GOOGLE
}

model User {
  id               Int       @id @default(autoincrement())
  name             String    @map("name") @db.Char(255)
  password         String?   @db.Char(255)
  email            String    @unique @db.Char(255)
  isEmailConfirmed Boolean   @default(false) @map("is_email_confirmed")
  provider         Provider  @default(EMAIL)
  role             Role      @default(USER)
  reviews          Review[]
  cart             Cart?
  favorites        Article[] @relation(name: "_user_favorites")
  orders           Order[]

  @@map("user")
}

model CartItem {
  id        Int      @id @default(autoincrement())
  quantity  Int      @default(1)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  articleId Int?     @map("article_id")
  article   Article? @relation(fields: [articleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  cartId    Int?     @map("cart_id")
  cart      Cart?    @relation(fields: [cartId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("cart_item")
}

model Cart {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @default(now()) @updatedAt @map("updated_at")
  userId    Int?       @unique @map("user_id")
  user      User?      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  cartItems CartItem[]

  @@map("cart")
}

enum OrderStatus {
  CENCELED
  CREATED
  PROCESSED
  SENDED
  DELIVERED
  RECEIVED
}

model OrderItem {
  id            Int      @id @default(autoincrement())
  quantity      Int      @default(1)
  subtotalPrice Float?   @map("subtotal_price") @db.Float
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @default(now()) @updatedAt @map("updated_at")
  articleId     Int?     @map("article_id")
  article       Article? @relation(fields: [articleId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  orderId       Int?     @map("order_id")
  order         Order?   @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("order_item")
}

model Address {
  id        Int      @id @default(autoincrement())
  street    String   @db.VarChar(3000)
  city      String   @db.VarChar(3000)
  country   String   @db.VarChar(3000)
  postCode  String   @map("post_code") @db.Char(40)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  order     Order[]

  @@map("address")
}

model Cancel {
  id        Int      @id @default(autoincrement())
  reason    String   @map("reason") @db.VarChar(3000)
  // isMoneyReturned Boolean  @map("is_money_returned")
  // amountReturned  Float?   @default(0) @map("amount_returned") @db.Float
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   Int      @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("cancel")
}

enum DeliveryStatus {
  PENDED
  PROCESSED
  SENDED
  DELIVERED
  RECEIVED
}

model Delivery {
  id           Int       @id @default(autoincrement())
  shippingCost Float     @map("shipping_cost") @db.Float
  addition     String?   @db.VarChar(3000)
  sendedAt     DateTime? @map("sended_at")
  deliveredAt  DateTime? @map("delivered_at")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @default(now()) @updatedAt @map("updated_at")
  orderId      Int       @unique @map("order_id")
  order        Order     @relation(fields: [orderId], references: [id])

  @@map("delivery")
}

model Order {
  id         Int         @id @default(autoincrement())
  totalPrice Float?      @map("total_price") @db.Float
  createdAt  DateTime    @default(now()) @map("created_at")
  updatedAt  DateTime    @default(now()) @updatedAt @map("updated_at")
  userId     Int?        @map("user_id")
  status     OrderStatus @default(CREATED)
  address    Address     @relation(fields: [addressId], references: [id])
  addressId  Int         @map("address_id")
  cancel     Cancel?
  user       User?       @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  orderItems OrderItem[]
  delivery   Delivery?

  @@map("order")
}
