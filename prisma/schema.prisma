// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Article {
  id               Int        @id() @default(autoincrement())
  price            Float      @db.Float()
  inStock          Boolean?   @map("in_stock")
  discription      String     @db.VarChar(3000)
  characteristic   String     @db.VarChar(3000)
  rating           Float?     @db.Float()
  name             String     @unique() @db.Char(255)
  count            Int        @default(1)
  views            Int        @default(0)
  isPreviouslyUsed Boolean    @default(false) @map("is_previously_used")
  createdAt        DateTime   @default(now()) @map("created_at")
  updatedAt        DateTime   @default(now()) @updatedAt @map("updated_at")
  images           File[]
  sale             Sale?
  reviews          Review[]
  categories       Category[] @relation(name: "_article_category")
  cartItems        CartItem[]
  folovers         User[]     @relation(name: "_user_favorites")

  @@map("article")
}

model File {
  id        Int      @id() @default(autoincrement())
  name      String   @db.Char(255)
  url       String   @db.Char(255)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  articleId Int?     @map("article_id")
  article   Article? @relation(fields: [articleId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("file")
}

model Sale {
  id         Int      @id() @default(autoincrement())
  oldPrise   Int      @map("old_prise")
  newPrise   Int      @map("new_prise")
  activeTill DateTime @map("active_till")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at")
  articleId  Int?     @unique @map("article_id")
  article    Article? @relation(fields: [articleId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("sale")
}

model Review {
  id        Int      @id() @default(autoincrement())
  text      String   @db.VarChar(3000)
  stars     Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  articleId Int?     @map("article_id")
  article   Article? @relation(fields: [articleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId  Int?     @map("author_id")
  author    User?    @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("review")
}

model Category {
  id       Int       @id() @default(autoincrement())
  name     String    @unique() @db.Char(255)
  articles Article[] @relation(name: "_article_category")

  @@map("category")
}

enum Role {
  USER
  ADMIN
}

enum Provider {
  EMAIL
  GOOGLE
}

model User {
  id               Int       @id() @default(autoincrement())
  name             String    @map("name") @db.Char(255)
  password         String?   @db.Char(255)
  email            String    @unique() @db.Char(255)
  isEmailConfirmed Boolean   @default(false) @map("is_email_confirmed")
  provider         Provider  @default(EMAIL)
  role             Role      @default(USER)
  reviews          Review[]
  cart             Cart?
  favorites        Article[] @relation(name: "_user_favorites")

  @@map("user")
}

model CartItem {
  id            Int      @id() @default(autoincrement())
  quantity      Int      @default(1)
  subtotalPrice Float?   @map("subtotal_price")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @default(now()) @updatedAt @map("updated_at")
  articleId     Int?     @map("article_id")
  article       Article? @relation(fields: [articleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  cartId        Int?     @map("cart_id")
  cart          Cart?    @relation(fields: [cartId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("cart_item")
}

model Cart {
  id         Int        @id() @default(autoincrement())
  totalPrice Float?     @map("total_price")
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @default(now()) @updatedAt @map("updated_at")
  userId     Int?       @unique() @map("user_id")
  user       User?      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  cartItems  CartItem[]

  @@map("cart")
}
